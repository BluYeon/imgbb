{"version":3,"sources":["Row.jsx","Table.jsx","IMGBB.jsx","App.js","reportWebVitals.js","index.js"],"names":["Row","text","count","id","toString","onClick","document","getElementById","textContent","submitFunc","Table","rows","content","map","arr","index","style","border","IMGBB","useState","results","setResults","display","flexDirection","cols","value","result","split","forEach","element","includes","push","slice","indexOf","type","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"uNAgBeA,MAbf,YAA4B,IAAbC,EAAY,EAAZA,KAAKC,EAAO,EAAPA,MAIZC,EAAE,eAAWD,EAAME,YACvB,OACI,+BACI,6BAAKH,IACL,6BAAI,cAAC,kBAAD,CAAiBA,KAAMA,EAAvB,SAA6B,wBAAQE,GAAIA,EAAIE,QAAS,kBAPlE,SAAoBF,GAChBG,SAASC,eAAeJ,GAAIK,YAAc,SAM0BC,CAAWN,IAA1C,0BCO9BO,MAff,YAA6B,IACnBC,EADkB,EAAXC,QACQC,KAAI,SAACC,EAAIC,GAAL,OAAe,cAAC,EAAD,CAAKd,KAAMa,EAAKZ,MAAOa,OAC/D,OACI,+BACI,wBAAOC,MAAO,CAAEC,OAAQ,mBAAxB,UACI,+BACI,yCACA,2CAEHN,QCoBFO,MA7Bf,WAAkB,IAAD,EACiBC,mBAAS,IAD1B,mBACNC,EADM,KACGC,EADH,KAgBb,OACI,+BACI,sBAAKL,MAAO,CAAEM,QAAS,QAAvB,UACI,sBAAKN,MAAO,CAAEM,QAAS,OAAQC,cAAe,UAA9C,UACI,0BAAUpB,GAAG,UAAUQ,KAAK,KAAKa,KAAK,OACtC,uBAAOnB,QAlBvB,WACI,IAAIO,EAAUN,SAASC,eAAe,WAAWkB,MAC7CC,EAAS,GACId,EAAQe,MAAM,MACpBC,SAAQ,SAAAC,GACXA,EAAQC,SAAS,OACjBJ,EAAOK,KAAKF,EAAQG,MAAMH,EAAQI,QAAQ,QAAU,EAAGJ,EAAQI,QAAQ,OAAS,IAEhFP,EAAOK,KAAKF,EAAQG,MAAMH,EAAQI,QAAQ,QAAU,EAAGJ,EAAQI,QAAQ,OAAS,OAGxFZ,EAAWK,IAO6BQ,KAAK,SAAST,MAAM,cAEpD,cAAC,EAAD,CAAOb,QAASQ,UChBjBe,MARf,WACE,OACE,qBAAKC,UAAU,MAAf,SACE,cAAC,EAAD,OCOSC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF1C,SAASC,eAAe,SAM1B8B,M","file":"static/js/main.d72cf1f4.chunk.js","sourcesContent":["import React from 'react'\r\nimport {CopyToClipboard} from 'react-copy-to-clipboard'\r\n\r\nfunction Row ({text,count}){\r\n    function submitFunc(id) {\r\n        document.getElementById(id).textContent = \"Copied\";\r\n    }\r\n    let id = `copy ${count.toString()}`;\r\n    return(\r\n        <tr>\r\n            <td>{text}</td>\r\n            <td><CopyToClipboard text={text}><button id={id} onClick={() => submitFunc(id)}>Copy</button></CopyToClipboard></td>\r\n        </tr>\r\n    )\r\n\r\n}\r\nexport default Row;","import React from 'react'\r\nimport Row from './Row.jsx'\r\n\r\nfunction Table({ content }) {\r\n    const rows = content.map((arr,index) => <Row text={arr} count={index} />);\r\n    return (\r\n        <body>\r\n            <table style={{ border: '1px solid black' }}>\r\n                <tr>\r\n                    <th>Content</th>\r\n                    <th>Action</th>\r\n                </tr>\r\n                {rows}\r\n            </table>\r\n        </body>\r\n    )\r\n}\r\n\r\nexport default Table;","import React, { useState } from 'react'\r\nimport Table from './Table.jsx'\r\n\r\nfunction IMGBB() {\r\n    const [results, setResults] = useState([])\r\n\r\n    function submitFunc() {\r\n        var content = document.getElementById(\"content\").value;\r\n        var result = [];\r\n        var contentarr = content.split(\"\\n\");\r\n        contentarr.forEach(element => {\r\n            if (element.includes(\"jpg\")) {\r\n                result.push(element.slice(element.indexOf(\"src=\") + 5, element.indexOf(\"jpg\") + 3));\r\n            } else {\r\n                result.push(element.slice(element.indexOf(\"src=\") + 5, element.indexOf(\"png\") + 3));\r\n            }\r\n        });\r\n        setResults(result)\r\n    }\r\n    return (\r\n        <body>\r\n            <div style={{ display: 'flex' }}>\r\n                <div style={{ display: 'flex', flexDirection: 'column' }}>\r\n                    <textarea id=\"content\" rows=\"50\" cols=\"50\"></textarea>\r\n                    <input onClick={submitFunc} type=\"submit\" value=\"Submit\"></input>\r\n                </div>\r\n                <Table content={results} />\r\n            </div>\r\n        </body>\r\n    )\r\n}\r\n\r\nexport default IMGBB;","import \"./App.css\";\nimport IMGBB from './IMGBB.jsx'\nfunction App() {\n  return (\n    <div className=\"App\">\n      <IMGBB />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}